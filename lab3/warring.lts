// Adverse circumstances: If both neighbours try to raise the flags continuously and both neighbours see the others flag already raised,
// they will enter a loop where they both try to rise the flag but no one can keep it raised.
 
const False = 0
const True = 1
range Bool = False..True
set BoolActions = {setTrue, setFalse, [False], [True]}

BOOLVAR = VAL[False],
VAL[v:Bool] = (setTrue -> VAL[True]
            |setFalse -> VAL[False]
            |[v] -> VAL[v]
            ).

||FLAGS = (flag1:BOOLVAR || flag2:BOOLVAR).

property MUTEX = (n1.enter -> n1.exit -> MUTEX 
                  | n2.enter -> n2.exit -> MUTEX).

NEIGHBOR1 = (flag1.setTrue -> TEST1),
TEST1 = (flag2[raised:Bool] -> 
          if (raised) then (flag1.setFalse -> NEIGHBOR1)
          else (enter -> exit -> flag1.setFalse -> NEIGHBOR1)
        ) + {{flag1,flag2}.BoolActions}.

NEIGHBOR2 = (flag2.setTrue -> TEST2),
TEST2 = (flag1[raised:Bool] -> 
          if (raised) then (flag2.setFalse -> NEIGHBOR2)
          else (enter -> exit -> flag2.setFalse -> NEIGHBOR2)
        ) + {{flag1,flag2}.BoolActions}.

||FIELD = (n1:NEIGHBOR1 || n2:NEIGHBOR2 || {n1,n2}::FLAGS || MUTEX).
||GREEDY = FIELD << {n1.flag1.setTrue, n2.flag2.setTrue}.

progress NEIGHBOR1PROG = {n1.enter}
progress NEIGHBOR2PROG = {n2.enter}
